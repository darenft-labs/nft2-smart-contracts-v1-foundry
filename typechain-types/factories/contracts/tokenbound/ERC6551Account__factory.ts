/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC6551Account,
  ERC6551AccountInterface,
} from "../../../contracts/tokenbound/ERC6551Account";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isValidSigner",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d86806100206000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461017b578063bc197c81146101a8578063c19d93fb146101d7578063f23a6e61146101fb578063fc0c546a1461022857600080fd5b806301ffc9a7146100a1578063150b7a02146100d65780631626ba7e1461011b578063519454471461013b578063523e32601461015b57600080fd5b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046107dd565b610260565b60405190151581526020015b60405180910390f35b3480156100e257600080fd5b506101026100f1366004610861565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100cd565b34801561012757600080fd5b506101026101363660046108ea565b6102e8565b61014e6101493660046109a5565b61031f565b6040516100cd9190610a6f565b34801561016757600080fd5b50610102610176366004610a82565b610458565b34801561018757600080fd5b50610190610479565b6040516001600160a01b0390911681526020016100cd565b3480156101b457600080fd5b506101026101c3366004610b1c565b63bc197c8160e01b98975050505050505050565b3480156101e357600080fd5b506101ed60005481565b6040519081526020016100cd565b34801561020757600080fd5b50610102610216366004610bdb565b63f23a6e6160e01b9695505050505050565b34801561023457600080fd5b5061023d61050f565b604080519384526001600160a01b039092166020840152908201526060016100cd565b60006001600160e01b031982166301ffc9a760e01b148061029157506001600160e01b03198216636faff5f160e01b145b806102ac57506001600160e01b03198216635194544760e01b145b806102c757506001600160e01b03198216630a85bd0160e11b145b806102e257506001600160e01b03198216630271189760e51b145b92915050565b6000806102fd6102f6610479565b8585610562565b905080156103155750630b135d3f60e11b90506102e2565b5060009392505050565b606061032a336105c3565b61036c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064015b60405180910390fd5b60ff8216156103c85760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b6064820152608401610363565b60008081546103d690610c57565b919050819055506000866001600160a01b03168686866040516103fa929190610c7e565b60006040518083038185875af1925050503d8060008114610437576040519150601f19603f3d011682016040523d82523d6000602084013e61043c565b606091505b50925090508061044e57815160208301fd5b5095945050505050565b6000610463846105c3565b156103155750630291f19360e51b5b9392505050565b60008060008061048761050f565b92509250925046831461049e576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105079190610c8e565b935050505090565b60408051606080825260808201909252600091829182918291906020820181803683370190505090506060604d60208301303c808060200190518101906105569190610cab565b93509350935050909192565b600080600061057185856105e8565b9092509050600081600481111561058a5761058a610ce4565b1480156105a85750856001600160a01b0316826001600160a01b0316145b806105b957506105b986868661062d565b9695505050505050565b60006105cd610479565b6001600160a01b0316826001600160a01b0316149050919050565b600080825160410361061e5760208301516040840151606085015160001a61061287828585610719565b94509450505050610626565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401610657929190610cfa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516106959190610d1b565b600060405180830381855afa9150503d80600081146106d0576040519150601f19603f3d011682016040523d82523d6000602084013e6106d5565b606091505b50915091508180156106e957506020815110155b80156105b957508051630b135d3f60e11b9061070e9083016020908101908401610d37565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561075057506000905060036107d4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156107a4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107cd576000600192509250506107d4565b9150600090505b94509492505050565b6000602082840312156107ef57600080fd5b81356001600160e01b03198116811461047257600080fd5b6001600160a01b038116811461081c57600080fd5b50565b60008083601f84011261083157600080fd5b50813567ffffffffffffffff81111561084957600080fd5b60208301915083602082850101111561062657600080fd5b60008060008060006080868803121561087957600080fd5b853561088481610807565b9450602086013561089481610807565b935060408601359250606086013567ffffffffffffffff8111156108b757600080fd5b6108c38882890161081f565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108fd57600080fd5b82359150602083013567ffffffffffffffff8082111561091c57600080fd5b818501915085601f83011261093057600080fd5b813581811115610942576109426108d4565b604051601f8201601f19908116603f0116810190838211818310171561096a5761096a6108d4565b8160405282815288602084870101111561098357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806000608086880312156109bd57600080fd5b85356109c881610807565b945060208601359350604086013567ffffffffffffffff8111156109eb57600080fd5b6109f78882890161081f565b909450925050606086013560ff81168114610a1157600080fd5b809150509295509295909350565b60005b83811015610a3a578181015183820152602001610a22565b50506000910152565b60008151808452610a5b816020860160208601610a1f565b601f01601f19169290920160200192915050565b6020815260006104726020830184610a43565b600080600060408486031215610a9757600080fd5b8335610aa281610807565b9250602084013567ffffffffffffffff811115610abe57600080fd5b610aca8682870161081f565b9497909650939450505050565b60008083601f840112610ae957600080fd5b50813567ffffffffffffffff811115610b0157600080fd5b6020830191508360208260051b850101111561062657600080fd5b60008060008060008060008060a0898b031215610b3857600080fd5b8835610b4381610807565b97506020890135610b5381610807565b9650604089013567ffffffffffffffff80821115610b7057600080fd5b610b7c8c838d01610ad7565b909850965060608b0135915080821115610b9557600080fd5b610ba18c838d01610ad7565b909650945060808b0135915080821115610bba57600080fd5b50610bc78b828c0161081f565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610bf457600080fd5b8635610bff81610807565b95506020870135610c0f81610807565b94506040870135935060608701359250608087013567ffffffffffffffff811115610c3957600080fd5b610c4589828a0161081f565b979a9699509497509295939492505050565b600060018201610c7757634e487b7160e01b600052601160045260246000fd5b5060010190565b8183823760009101908152919050565b600060208284031215610ca057600080fd5b815161047281610807565b600080600060608486031215610cc057600080fd5b835192506020840151610cd281610807565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610d136040830184610a43565b949350505050565b60008251610d2d818460208701610a1f565b9190910192915050565b600060208284031215610d4957600080fd5b505191905056fea2646970667358221220056db14537b5240819e60ca30548e3ec43ec35ec664d11a869b4776cd415a53864736f6c63430008140033";

type ERC6551AccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC6551AccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC6551Account__factory extends ContractFactory {
  constructor(...args: ERC6551AccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC6551Account & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC6551Account__factory {
    return super.connect(runner) as ERC6551Account__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC6551AccountInterface {
    return new Interface(_abi) as ERC6551AccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC6551Account {
    return new Contract(address, _abi, runner) as unknown as ERC6551Account;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Voucher {
  export type VestingScheduleStruct = {
    amount: BigNumberish;
    vestingType: BigNumberish;
    linearType: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    isVested: BigNumberish;
    remainingAmount: BigNumberish;
  };

  export type VestingScheduleStructOutput = [
    amount: bigint,
    vestingType: bigint,
    linearType: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint,
    isVested: bigint,
    remainingAmount: bigint
  ] & {
    amount: bigint;
    vestingType: bigint;
    linearType: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    isVested: bigint;
    remainingAmount: bigint;
  };

  export type VestingStruct = {
    balance: BigNumberish;
    schedules: Voucher.VestingScheduleStruct[];
  };

  export type VestingStructOutput = [
    balance: bigint,
    schedules: Voucher.VestingScheduleStructOutput[]
  ] & { balance: bigint; schedules: Voucher.VestingScheduleStructOutput[] };
}

export interface VoucherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create"
      | "createBatch"
      | "createBatchWithRoyalty"
      | "onERC721Received"
      | "owner"
      | "redeem"
      | "renounceOwnership"
      | "tbaOfToken"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchCreated"
      | "OwnershipTransferred"
      | "VoucherCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [Voucher.VestingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [BigNumberish, string[], Voucher.VestingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatchWithRoyalty",
    values: [
      BigNumberish,
      string[],
      AddressLike,
      BigNumberish,
      Voucher.VestingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tbaOfToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatchWithRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tbaOfToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [
    collection: AddressLike,
    startId: BigNumberish,
    endId: BigNumberish
  ];
  export type OutputTuple = [
    collection: string,
    startId: bigint,
    endId: bigint
  ];
  export interface OutputObject {
    collection: string;
    startId: bigint;
    endId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherCreatedEvent {
  export type InputTuple = [
    collection: AddressLike,
    tokenId: BigNumberish,
    tba: AddressLike
  ];
  export type OutputTuple = [collection: string, tokenId: bigint, tba: string];
  export interface OutputObject {
    collection: string;
    tokenId: bigint;
    tba: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voucher extends BaseContract {
  connect(runner?: ContractRunner | null): Voucher;
  waitForDeployment(): Promise<this>;

  interface: VoucherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create: TypedContractMethod<
    [vesting: Voucher.VestingStruct],
    [[bigint, string] & { tokenId: bigint; tba: string }],
    "payable"
  >;

  createBatch: TypedContractMethod<
    [quantity: BigNumberish, uris: string[], vesting: Voucher.VestingStruct],
    [[bigint, bigint] & { startId: bigint; endId: bigint }],
    "nonpayable"
  >;

  createBatchWithRoyalty: TypedContractMethod<
    [
      quantity: BigNumberish,
      uris: string[],
      receiver: AddressLike,
      rate: BigNumberish,
      vesting: Voucher.VestingStruct
    ],
    [[bigint, bigint] & { startId: bigint; endId: bigint }],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<[tokenId: BigNumberish], [boolean], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tbaOfToken: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [vesting: Voucher.VestingStruct],
    [[bigint, string] & { tokenId: bigint; tba: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [quantity: BigNumberish, uris: string[], vesting: Voucher.VestingStruct],
    [[bigint, bigint] & { startId: bigint; endId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBatchWithRoyalty"
  ): TypedContractMethod<
    [
      quantity: BigNumberish,
      uris: string[],
      receiver: AddressLike,
      rate: BigNumberish,
      vesting: Voucher.VestingStruct
    ],
    [[bigint, bigint] & { startId: bigint; endId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tbaOfToken"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoucherCreated"
  ): TypedContractEvent<
    VoucherCreatedEvent.InputTuple,
    VoucherCreatedEvent.OutputTuple,
    VoucherCreatedEvent.OutputObject
  >;

  filters: {
    "BatchCreated(address,uint256,uint256)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoucherCreated(address,uint256,address)": TypedContractEvent<
      VoucherCreatedEvent.InputTuple,
      VoucherCreatedEvent.OutputTuple,
      VoucherCreatedEvent.OutputObject
    >;
    VoucherCreated: TypedContractEvent<
      VoucherCreatedEvent.InputTuple,
      VoucherCreatedEvent.OutputTuple,
      VoucherCreatedEvent.OutputObject
    >;
  };
}

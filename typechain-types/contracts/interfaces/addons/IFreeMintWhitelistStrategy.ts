/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFreeMintWhitelistStrategyInterface extends Interface {
  getFunction(
    nameOrSignature: "campaignId" | "freeMintWhitelist" | "updateMerkleRoot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FreeMint" | "UpdateMerkleRoot"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaignId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintWhitelist",
    values: [BytesLike, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoot",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "campaignId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeMintWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoot",
    data: BytesLike
  ): Result;
}

export namespace FreeMintEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMerkleRootEvent {
  export type InputTuple = [merkleRoot: BytesLike];
  export type OutputTuple = [merkleRoot: string];
  export interface OutputObject {
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFreeMintWhitelistStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): IFreeMintWhitelistStrategy;
  waitForDeployment(): Promise<this>;

  interface: IFreeMintWhitelistStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignId: TypedContractMethod<[], [string], "view">;

  freeMintWhitelist: TypedContractMethod<
    [leafData: BytesLike, proof: BytesLike[], amount: BigNumberish],
    [void],
    "payable"
  >;

  updateMerkleRoot: TypedContractMethod<
    [merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freeMintWhitelist"
  ): TypedContractMethod<
    [leafData: BytesLike, proof: BytesLike[], amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateMerkleRoot"
  ): TypedContractMethod<[merkleRoot: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "FreeMint"
  ): TypedContractEvent<
    FreeMintEvent.InputTuple,
    FreeMintEvent.OutputTuple,
    FreeMintEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMerkleRoot"
  ): TypedContractEvent<
    UpdateMerkleRootEvent.InputTuple,
    UpdateMerkleRootEvent.OutputTuple,
    UpdateMerkleRootEvent.OutputObject
  >;

  filters: {
    "FreeMint(address,uint256)": TypedContractEvent<
      FreeMintEvent.InputTuple,
      FreeMintEvent.OutputTuple,
      FreeMintEvent.OutputObject
    >;
    FreeMint: TypedContractEvent<
      FreeMintEvent.InputTuple,
      FreeMintEvent.OutputTuple,
      FreeMintEvent.OutputObject
    >;

    "UpdateMerkleRoot(bytes32)": TypedContractEvent<
      UpdateMerkleRootEvent.InputTuple,
      UpdateMerkleRootEvent.OutputTuple,
      UpdateMerkleRootEvent.OutputObject
    >;
    UpdateMerkleRoot: TypedContractEvent<
      UpdateMerkleRootEvent.InputTuple,
      UpdateMerkleRootEvent.OutputTuple,
      UpdateMerkleRootEvent.OutputObject
    >;
  };
}

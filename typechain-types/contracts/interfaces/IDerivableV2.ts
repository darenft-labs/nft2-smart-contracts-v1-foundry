/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type DerivedTokenStruct = {
  collection: AddressLike;
  tokenId: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type DerivedTokenStructOutput = [
  collection: string,
  tokenId: bigint,
  startTime: bigint,
  endTime: bigint
] & { collection: string; tokenId: bigint; startTime: bigint; endTime: bigint };

export interface IDerivableV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "derive"
      | "deriveByKeys"
      | "derivedByKeyOf"
      | "derivedOf"
      | "isDerivable"
      | "isDerivableByKey"
      | "isUsable"
      | "isUsableByKey"
      | "underlyingOf"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Derive" | "DeriveByKeys"): EventFragment;

  encodeFunctionData(
    functionFragment: "derive",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveByKeys",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedByKeyOf",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivableByKey",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsableByKey",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "derive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deriveByKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivedByKeyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "derivedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDerivable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivableByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUsable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUsableByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingOf",
    data: BytesLike
  ): Result;
}

export namespace DeriveEvent {
  export type InputTuple = [
    underlyingCollection: AddressLike,
    underlyingTokenId: BigNumberish,
    derivedCollection: AddressLike,
    derivedTokenId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    underlyingCollection: string,
    underlyingTokenId: bigint,
    derivedCollection: string,
    derivedTokenId: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    underlyingCollection: string;
    underlyingTokenId: bigint;
    derivedCollection: string;
    derivedTokenId: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeriveByKeysEvent {
  export type InputTuple = [
    underlyingCollection: AddressLike,
    underlyingTokenId: BigNumberish,
    derivedCollection: AddressLike,
    derivedTokenId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    keyHashes: BytesLike[]
  ];
  export type OutputTuple = [
    underlyingCollection: string,
    underlyingTokenId: bigint,
    derivedCollection: string,
    derivedTokenId: bigint,
    startTime: bigint,
    endTime: bigint,
    keyHashes: string[]
  ];
  export interface OutputObject {
    underlyingCollection: string;
    underlyingTokenId: bigint;
    derivedCollection: string;
    derivedTokenId: bigint;
    startTime: bigint;
    endTime: bigint;
    keyHashes: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDerivableV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IDerivableV2;
  waitForDeployment(): Promise<this>;

  interface: IDerivableV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  derive: TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      royaltyRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  deriveByKeys: TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      royaltyRate: BigNumberish,
      keyHashes: BytesLike[]
    ],
    [bigint],
    "payable"
  >;

  derivedByKeyOf: TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      key: BytesLike
    ],
    [DerivedTokenStructOutput],
    "view"
  >;

  derivedOf: TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [DerivedTokenStructOutput],
    "view"
  >;

  isDerivable: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isDerivableByKey: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [boolean],
    "view"
  >;

  isUsable: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isUsableByKey: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [boolean],
    "view"
  >;

  underlyingOf: TypedContractMethod<
    [derivedTokenId: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "derive"
  ): TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      royaltyRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deriveByKeys"
  ): TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      royaltyRate: BigNumberish,
      keyHashes: BytesLike[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "derivedByKeyOf"
  ): TypedContractMethod<
    [
      underlyingCollection: AddressLike,
      underlyingTokenId: BigNumberish,
      key: BytesLike
    ],
    [DerivedTokenStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "derivedOf"
  ): TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [DerivedTokenStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDerivable"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDerivableByKey"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUsable"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUsableByKey"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlyingOf"
  ): TypedContractMethod<
    [derivedTokenId: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  getEvent(
    key: "Derive"
  ): TypedContractEvent<
    DeriveEvent.InputTuple,
    DeriveEvent.OutputTuple,
    DeriveEvent.OutputObject
  >;
  getEvent(
    key: "DeriveByKeys"
  ): TypedContractEvent<
    DeriveByKeysEvent.InputTuple,
    DeriveByKeysEvent.OutputTuple,
    DeriveByKeysEvent.OutputObject
  >;

  filters: {
    "Derive(address,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      DeriveEvent.InputTuple,
      DeriveEvent.OutputTuple,
      DeriveEvent.OutputObject
    >;
    Derive: TypedContractEvent<
      DeriveEvent.InputTuple,
      DeriveEvent.OutputTuple,
      DeriveEvent.OutputObject
    >;

    "DeriveByKeys(address,uint256,address,uint256,uint256,uint256,bytes32[])": TypedContractEvent<
      DeriveByKeysEvent.InputTuple,
      DeriveByKeysEvent.OutputTuple,
      DeriveByKeysEvent.OutputObject
    >;
    DeriveByKeys: TypedContractEvent<
      DeriveByKeysEvent.InputTuple,
      DeriveByKeysEvent.OutputTuple,
      DeriveByKeysEvent.OutputObject
    >;
  };
}

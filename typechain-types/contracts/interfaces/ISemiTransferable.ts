/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISemiTransferableInterface extends Interface {
  getFunction(
    nameOrSignature: "isLocked" | "lock" | "lockWithTime" | "unlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Lock" | "LockWithTime" | "Unlock"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lockWithTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockWithTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
}

export namespace LockEvent {
  export type InputTuple = [owner: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [owner: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockWithTimeEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockEvent {
  export type InputTuple = [owner: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [owner: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISemiTransferable extends BaseContract {
  connect(runner?: ContractRunner | null): ISemiTransferable;
  waitForDeployment(): Promise<this>;

  interface: ISemiTransferableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isLocked: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  lock: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  lockWithTime: TypedContractMethod<
    [tokenId: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlock: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isLocked"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockWithTime"
  ): TypedContractMethod<
    [tokenId: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Lock"
  ): TypedContractEvent<
    LockEvent.InputTuple,
    LockEvent.OutputTuple,
    LockEvent.OutputObject
  >;
  getEvent(
    key: "LockWithTime"
  ): TypedContractEvent<
    LockWithTimeEvent.InputTuple,
    LockWithTimeEvent.OutputTuple,
    LockWithTimeEvent.OutputObject
  >;
  getEvent(
    key: "Unlock"
  ): TypedContractEvent<
    UnlockEvent.InputTuple,
    UnlockEvent.OutputTuple,
    UnlockEvent.OutputObject
  >;

  filters: {
    "Lock(address,uint256)": TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;
    Lock: TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;

    "LockWithTime(address,uint256,uint256,uint256)": TypedContractEvent<
      LockWithTimeEvent.InputTuple,
      LockWithTimeEvent.OutputTuple,
      LockWithTimeEvent.OutputObject
    >;
    LockWithTime: TypedContractEvent<
      LockWithTimeEvent.InputTuple,
      LockWithTimeEvent.OutputTuple,
      LockWithTimeEvent.OutputObject
    >;

    "Unlock(address,uint256)": TypedContractEvent<
      UnlockEvent.InputTuple,
      UnlockEvent.OutputTuple,
      UnlockEvent.OutputObject
    >;
    Unlock: TypedContractEvent<
      UnlockEvent.InputTuple,
      UnlockEvent.OutputTuple,
      UnlockEvent.OutputObject
    >;
  };
}

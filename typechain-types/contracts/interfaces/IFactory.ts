/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type CollectionSettingsStruct = {
  royaltyRate: BigNumberish;
  isSoulBound: boolean;
  isFreeMintable: BigNumberish;
  isSemiTransferable: boolean;
};

export type CollectionSettingsStructOutput = [
  royaltyRate: bigint,
  isSoulBound: boolean,
  isFreeMintable: bigint,
  isSemiTransferable: boolean
] & {
  royaltyRate: bigint;
  isSoulBound: boolean;
  isFreeMintable: bigint;
  isSemiTransferable: boolean;
};

export type DataRegistrySettingsStruct = {
  disableComposable: boolean;
  disableDerivable: boolean;
};

export type DataRegistrySettingsStructOutput = [
  disableComposable: boolean,
  disableDerivable: boolean
] & { disableComposable: boolean; disableDerivable: boolean };

export interface IFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectionOf"
      | "createAddons"
      | "createCollection"
      | "createDataRegistry"
      | "createDataRegistryV2"
      | "createDerivedAccount"
      | "dataRegistryOf"
      | "derivedAccountOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddonsCreated"
      | "Collection1155Created"
      | "CollectionCreated"
      | "DataRegistryCreated"
      | "DataRegistryV2Created"
      | "DerivedAccountCreated"
      | "Fee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "collectionOf",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAddons",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [string, string, CollectionSettingsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDataRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createDataRegistryV2",
    values: [string, DataRegistrySettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createDerivedAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataRegistryOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedAccountOf",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAddons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDataRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDataRegistryV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDerivedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataRegistryOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivedAccountOf",
    data: BytesLike
  ): Result;
}

export namespace AddonsCreatedEvent {
  export type InputTuple = [
    collection: AddressLike,
    kind: BigNumberish,
    addons: AddressLike,
    campaignId: BytesLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    collection: string,
    kind: bigint,
    addons: string,
    campaignId: string,
    data: string
  ];
  export interface OutputObject {
    collection: string;
    kind: bigint;
    addons: string;
    campaignId: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Collection1155CreatedEvent {
  export type InputTuple = [owner: AddressLike, collection: AddressLike];
  export type OutputTuple = [owner: string, collection: string];
  export interface OutputObject {
    owner: string;
    collection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    collection: AddressLike,
    kind: BigNumberish
  ];
  export type OutputTuple = [owner: string, collection: string, kind: bigint];
  export interface OutputObject {
    owner: string;
    collection: string;
    kind: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataRegistryCreatedEvent {
  export type InputTuple = [
    dapp: AddressLike,
    registry: AddressLike,
    dappURI: string
  ];
  export type OutputTuple = [dapp: string, registry: string, dappURI: string];
  export interface OutputObject {
    dapp: string;
    registry: string;
    dappURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataRegistryV2CreatedEvent {
  export type InputTuple = [
    dapp: AddressLike,
    registry: AddressLike,
    dappURI: string
  ];
  export type OutputTuple = [dapp: string, registry: string, dappURI: string];
  export interface OutputObject {
    dapp: string;
    registry: string;
    dappURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DerivedAccountCreatedEvent {
  export type InputTuple = [
    underlyingCollection: AddressLike,
    underlyingTokenId: BigNumberish,
    derivedAccount: AddressLike
  ];
  export type OutputTuple = [
    underlyingCollection: string,
    underlyingTokenId: bigint,
    derivedAccount: string
  ];
  export interface OutputObject {
    underlyingCollection: string;
    underlyingTokenId: bigint;
    derivedAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEvent {
  export type InputTuple = [action: BytesLike, fee: BigNumberish];
  export type OutputTuple = [action: string, fee: bigint];
  export interface OutputObject {
    action: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IFactory;
  waitForDeployment(): Promise<this>;

  interface: IFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectionOf: TypedContractMethod<
    [owner: AddressLike, name: string, symbol: string],
    [string],
    "view"
  >;

  createAddons: TypedContractMethod<
    [collection: AddressLike, kind: BigNumberish, settingsData: BytesLike],
    [string],
    "nonpayable"
  >;

  createCollection: TypedContractMethod<
    [
      name: string,
      symbol: string,
      settings: CollectionSettingsStruct,
      kind: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  createDataRegistry: TypedContractMethod<
    [dappUri: string],
    [string],
    "nonpayable"
  >;

  createDataRegistryV2: TypedContractMethod<
    [dappUri: string, settings: DataRegistrySettingsStruct],
    [string],
    "nonpayable"
  >;

  createDerivedAccount: TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  dataRegistryOf: TypedContractMethod<[dapp: AddressLike], [string], "view">;

  derivedAccountOf: TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectionOf"
  ): TypedContractMethod<
    [owner: AddressLike, name: string, symbol: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAddons"
  ): TypedContractMethod<
    [collection: AddressLike, kind: BigNumberish, settingsData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      settings: CollectionSettingsStruct,
      kind: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDataRegistry"
  ): TypedContractMethod<[dappUri: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createDataRegistryV2"
  ): TypedContractMethod<
    [dappUri: string, settings: DataRegistrySettingsStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDerivedAccount"
  ): TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataRegistryOf"
  ): TypedContractMethod<[dapp: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "derivedAccountOf"
  ): TypedContractMethod<
    [underlyingCollection: AddressLike, underlyingTokenId: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "AddonsCreated"
  ): TypedContractEvent<
    AddonsCreatedEvent.InputTuple,
    AddonsCreatedEvent.OutputTuple,
    AddonsCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Collection1155Created"
  ): TypedContractEvent<
    Collection1155CreatedEvent.InputTuple,
    Collection1155CreatedEvent.OutputTuple,
    Collection1155CreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DataRegistryCreated"
  ): TypedContractEvent<
    DataRegistryCreatedEvent.InputTuple,
    DataRegistryCreatedEvent.OutputTuple,
    DataRegistryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DataRegistryV2Created"
  ): TypedContractEvent<
    DataRegistryV2CreatedEvent.InputTuple,
    DataRegistryV2CreatedEvent.OutputTuple,
    DataRegistryV2CreatedEvent.OutputObject
  >;
  getEvent(
    key: "DerivedAccountCreated"
  ): TypedContractEvent<
    DerivedAccountCreatedEvent.InputTuple,
    DerivedAccountCreatedEvent.OutputTuple,
    DerivedAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Fee"
  ): TypedContractEvent<
    FeeEvent.InputTuple,
    FeeEvent.OutputTuple,
    FeeEvent.OutputObject
  >;

  filters: {
    "AddonsCreated(address,uint8,address,bytes32,bytes)": TypedContractEvent<
      AddonsCreatedEvent.InputTuple,
      AddonsCreatedEvent.OutputTuple,
      AddonsCreatedEvent.OutputObject
    >;
    AddonsCreated: TypedContractEvent<
      AddonsCreatedEvent.InputTuple,
      AddonsCreatedEvent.OutputTuple,
      AddonsCreatedEvent.OutputObject
    >;

    "Collection1155Created(address,address)": TypedContractEvent<
      Collection1155CreatedEvent.InputTuple,
      Collection1155CreatedEvent.OutputTuple,
      Collection1155CreatedEvent.OutputObject
    >;
    Collection1155Created: TypedContractEvent<
      Collection1155CreatedEvent.InputTuple,
      Collection1155CreatedEvent.OutputTuple,
      Collection1155CreatedEvent.OutputObject
    >;

    "CollectionCreated(address,address,uint8)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;

    "DataRegistryCreated(address,address,string)": TypedContractEvent<
      DataRegistryCreatedEvent.InputTuple,
      DataRegistryCreatedEvent.OutputTuple,
      DataRegistryCreatedEvent.OutputObject
    >;
    DataRegistryCreated: TypedContractEvent<
      DataRegistryCreatedEvent.InputTuple,
      DataRegistryCreatedEvent.OutputTuple,
      DataRegistryCreatedEvent.OutputObject
    >;

    "DataRegistryV2Created(address,address,string)": TypedContractEvent<
      DataRegistryV2CreatedEvent.InputTuple,
      DataRegistryV2CreatedEvent.OutputTuple,
      DataRegistryV2CreatedEvent.OutputObject
    >;
    DataRegistryV2Created: TypedContractEvent<
      DataRegistryV2CreatedEvent.InputTuple,
      DataRegistryV2CreatedEvent.OutputTuple,
      DataRegistryV2CreatedEvent.OutputObject
    >;

    "DerivedAccountCreated(address,uint256,address)": TypedContractEvent<
      DerivedAccountCreatedEvent.InputTuple,
      DerivedAccountCreatedEvent.OutputTuple,
      DerivedAccountCreatedEvent.OutputObject
    >;
    DerivedAccountCreated: TypedContractEvent<
      DerivedAccountCreatedEvent.InputTuple,
      DerivedAccountCreatedEvent.OutputTuple,
      DerivedAccountCreatedEvent.OutputObject
    >;

    "Fee(bytes32,uint256)": TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
    Fee: TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDynamicInterface extends Interface {
  getFunction(
    nameOrSignature: "read" | "safeWrite" | "write"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Write"): EventFragment;

  encodeFunctionData(
    functionFragment: "read",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeWrite",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "write",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeWrite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "write", data: BytesLike): Result;
}

export namespace WriteEvent {
  export type InputTuple = [
    collection: AddressLike,
    tokenId: BigNumberish,
    key: BytesLike,
    value: BytesLike
  ];
  export type OutputTuple = [
    collection: string,
    tokenId: bigint,
    key: string,
    value: string
  ];
  export interface OutputObject {
    collection: string;
    tokenId: bigint;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDynamic extends BaseContract {
  connect(runner?: ContractRunner | null): IDynamic;
  waitForDeployment(): Promise<this>;

  interface: IDynamicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  read: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [string],
    "view"
  >;

  safeWrite: TypedContractMethod<
    [
      requester: AddressLike,
      collection: AddressLike,
      tokenId: BigNumberish,
      key: BytesLike,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  write: TypedContractMethod<
    [
      collection: AddressLike,
      tokenId: BigNumberish,
      key: BytesLike,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "read"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeWrite"
  ): TypedContractMethod<
    [
      requester: AddressLike,
      collection: AddressLike,
      tokenId: BigNumberish,
      key: BytesLike,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "write"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      tokenId: BigNumberish,
      key: BytesLike,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Write"
  ): TypedContractEvent<
    WriteEvent.InputTuple,
    WriteEvent.OutputTuple,
    WriteEvent.OutputObject
  >;

  filters: {
    "Write(address,uint256,bytes32,bytes)": TypedContractEvent<
      WriteEvent.InputTuple,
      WriteEvent.OutputTuple,
      WriteEvent.OutputObject
    >;
    Write: TypedContractEvent<
      WriteEvent.InputTuple,
      WriteEvent.OutputTuple,
      WriteEvent.OutputObject
    >;
  };
}
